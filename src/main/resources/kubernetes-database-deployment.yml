# Define a 'Persistent Volume Claim' (PVC) for PostgreSQL Storage, dynamically provisioned by cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pv-claim   # name of PVC essential for identifying the storage data
  labels:
    app: postgresql
    tier: database
spec:
  accessModes:
    - ReadWriteOnce   # This specifies the mode of the claim that we are trying to create.
  resources:
    requests:
      storage: 1Gi    # This will tell Kubernetes about the amount of space we are trying to claim.
---
# Configure 'Deployment' of PostgreSQL server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  labels:
    app: postgresql
    tier: database
spec:
  selector: # PostgreSQL Pod Should contain same labels
    matchLabels:
      app: postgresql
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: postgresql
        tier: database
    spec:
      containers:
        - image: postgres:latest   # image from Docker Hub
          name: postgresql
          env:
            - name: POSTGRES_PASSWORD   # Setting PostgreSQL password from a 'Secret'
              valueFrom:
                secretKeyRef:
                  name: postgresql-secrets
                  key: password
            - name: POSTGRES_DB   # Setting Database Name from an 'Env' variable
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: dbName
          ports:
            - containerPort: 5432
              name: postgresql
          volumeMounts:        # Mounting volume obtained from Persistent Volume Claim
            - name: postgresql-persistent-storage
              mountPath: /var/lib/postgresql/data   # This is the path in the container on which the mounting will take place.
      volumes:
        - name: postgresql-persistent-storage   # Obtaining 'volume' from PVC
          persistentVolumeClaim:
            claimName: postgresql-pv-claim
---
# Define a 'Service' To Expose PostgreSQL to Other Services
apiVersion: v1
kind: Service
metadata:
  name: postgresql   # DNS name
  labels:
    app: postgresql
    tier: database
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:       # PostgreSQL Pod Should contain same labels
    app: postgresql
    tier: database
